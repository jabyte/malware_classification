function countSegments( data_file )
    try
        lines = readlines( data_file )
        len = length( lines )
        list = ""
        labels = ""

        last_hit = 0
        prev_index = 1
        next_index = len

        while prev_index < next_index
            prev_str = string( split( lines[prev_index], ":" )[1] )
            next_str = string( split( lines[next_index], ":" )[1] )

            if prev_str == next_str
                if next_index == len
                    labels = ( labels == "" ) ? labels * replace( prev_str, ".", "" ) : labels * "," * replace( prev_str, ".", "" )
                    list = ( list == "" ) ? list * string( len - last_hit ) : list * "," * string( len - last_hit )
                    prev_index = len
                else
                    prev_index = next_index
                    next_index = len
                end

            elseif prev_str != string( split( lines[prev_index + 1], ":" )[1] )
                labels = ( labels == "" ) ? labels * replace( prev_str, ".", "" ) : labels * "," * replace( prev_str, ".", "" )
                list = ( list == "" ) ? list * string( prev_index - last_hit ) : list * "," * string( prev_index - last_hit )
                last_hit = prev_index
                prev_index += 1
                next_index = len

            else
                prev_index += 1
                next_index = prev_index + div( next_index - prev_index, 2 )
            end
        end
        return labels * "\n" * list
    catch err
        println( err )
        return ""
    end
end

function countOpcodes( data_file )
    opcodes = []
    try
        text = readlines( data_file )
        for ln in text
            line = string( ln )
            if length( line ) > 0 && split( line, ':' )[1] == ".text"
                index = searchindex( line, "\t" )
                if index > 0
                    line = split( line[index + 1:end]  )[1]
                    line = split( line, ";" )[1]
                    line = split( line, ":" )[1]
                    line = string( line )
                    len = length( line )
                    if len > 1 && len < 6 && ismatch( r"[a-z]*", line ) && !ismatch( r"[0-9]", line) && !ismatch( r"[A-Z]", line ) && !contains( line, "." ) && !contains( line, "-" ) && !contains( line, "_" ) && !contains( line, "?" ) && line != "align" && line != "db" && line != "dd"
                        push!( opcodes, line )
                    end
                end
            end
        end
        return length( opcodes )
    catch err
        println( err )
        return -1
    end
end

function countLines( data_file )
  try
    return length( readlines( data_file ) )
  catch err
    showerror(STDOUT, err, backtrace() )
    println()
    return -1
  end
end

function countWords( data_file )
  try
    return length( split( readstring( data_file ), ' ' ) )
  catch err
    showerror( STDOUT, err, backtrace() )
    println()
    return -1
  end
end

function countChar( data_file )
  charCount = 0
  try
    lines = split( readstring( data_file ), ' ' )
    for word in lines
      charCount += length( word )
    end
    return charCount
  catch err
    showerror(STDOUT, err, backtrace() )
    println()
    return -1
  end
end

function countSize( data_file )
    try
        return sizeof( readstring( data_file ) )
    catch err
        showerror( STDOUT, err, backtrace() )
  end
end

function extract_features( file, file_extension )
    try
        if contains( file, file_extension )
            seg = countSegments( file )
            
            str = countOpcodes( file )
            lbs = split( str, "\n" )[1]
            fts = split( str, "\n" )[end]
            get_lbs = ( get_lbs == split( str, "," )[1] ) ? * "," * split( str, "\n" )[1] : split( str, "\n" )[1] * "," * get_lbs
            return string( countSegment( file ) ) * "," * countOpcodes( file ) * "," * string( countSize( file ) ) * "," * string( countLines( file ) )
        end
    catch err
        showerror(STDOUT, err, backtrace() )
    end
    return ""
end

#print( "Give the absolute directory path: ")
#path = readline()
path = "/home/jabyte/Thesis/Training_Set/train/"

print( "Name the csv file: " )
new_file = readline()

try
    cd( path )
    list = readdir( path )
    extract = ""

    println("Extracting features...")
    for item in list
        line = extract_features( string( item ), ".asm" )
        if line != ""
            extract *= line * "\n"
            println( line )
        end
    end

    features = "\"Segments\",\"Size\",\"Lines\", \"Words\",\"Characters\"" * "\n" * extract
    println("Writing to features to file...")
    file_handler = open( path * new_file, "w" )
    write( new_file, features )
    close( file_handler )
    println("Done Succesfully!")

catch err
    showerror(STDOUT, err, backtrace() )
    close( file_handler )
    println("Done Badly!")
end
